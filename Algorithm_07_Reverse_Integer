#####################################################################
Problem:
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
#####################################################################
Idea:
1. 初始化输出num数组
2 abs() to solve negative value cases
3.  while
    1st iteration a = 123 num = 0
    2nd iteration a = 12  num = 3
    3rd iteration a = 1   num = 32
    4th iteration a = 0   num = 321
    ->  temp = a%10
    ->  num = num*10 + temp
    ->  a = int(a/10)
#####################################################################
Python:

class Solution:
    def reverse(self, x: int) -> int:
        num = 0
        a = abs(x)
        while (a != 0):
            temp = a%10
            num = num*10 + temp 
            a = int(a/10)
        if x > 0 and num < 2147483647:
            return num
        elif x < 0 and num <= 2147483647:
            return -num
        else:
            return 0 
    


