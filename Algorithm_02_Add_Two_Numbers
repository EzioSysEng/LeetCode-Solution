#############################################################################################
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
##############################################################################################

Figure out the boundry conditions with interviewer.

Idea:

- List + Addition Simulation 链表+高精度加法模拟
  - List: Dummy head 虚拟头
  - Addition Simulation：Carry bit 进位

- Special cases: 
  1. Two numbers have different lengths
  e.g. 123 + 456789
  2. Sum has more digits
  e.g. 11 + 99 = 110

dummy = tail = ListNode(0)
while l1 or l2 or carry:
  sum = l1?.value + l2?.value + carry
  tail.next = ListNode(sum%10)
  tail = tail.next
  carry = sum /= 10 (sum >= 10 carry = 1)
  l1,l2 = l1?.next, l2?.next
return dummy.next

Time complexity: O(max(n,m))
Space complexity: O(max(n,m))
##############################################################################################
Codes:

Python:
class Solution:
  def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
    dummy = tail = ListNode(0)
    s = 0
    while l1 or l2 or s:
      s += (l1.val if l1 else 0) + (l2.val if l2 else 0)
      tail.next = ListNode(s % 10)
      tail = tail.next
      s //= 10
      l1 = l1.next if l1 else None
      l2 = l2.next if l2 else None
    return dummy.next
    
 C++:
 class Solution {
public:
  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    ListNode dummy(0);
    ListNode* tail = &dummy;
    int sum = 0;
    while (l1 || l2 || sum) {
      sum += (l1 ? l1->val : 0) + (l2 ? l2->val : 0);
      l1 = l1 ? l1->next : nullptr;
      l2 = l2 ? l2->next : nullptr;
      tail->next = new ListNode(sum % 10);
      sum /= 10;
      tail = tail->next;
    }            
    return dummy.next;
  }
};

Java:
class Solution {
  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode tail = new ListNode(0);
    ListNode dummy = tail;
    int sum = 0;
    while (l1 != null || l2 != null || sum > 0) {
      sum += (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);
      tail.next = new ListNode(sum % 10);
      tail = tail.next;
      if (l1 != null) l1 = l1.next;
      if (l2 != null) l2 = l2.next;
      sum /= 10;
    }
    return dummy.next;
  }
}

